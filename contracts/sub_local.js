const Tx = require('ethereumjs-tx')
const Web3 = require('web3');
const web3 = new Web3('http://127.0.0.1:7545')

const government = '0x5578Ec2cb3994BC87823802071241726EBC40FDF'

const privateKeyGovernment = Buffer.from('55f8f475ba59b726f4b1edf4a90ac326f752016c41c35a95004bd1480ca08210', 'hex')

//console.log(privateKeyGovernment)
const data = '0x608060405234801561001057600080fd5b5061080b806100206000396000f300608060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063b93a89f71461005c578063d56768eb14610109578063ea87152b14610140575b600080fd5b34801561006857600080fd5b50610087600480360381019080803590602001909291905050506101b3565b6040518080602001838152602001828103825284818151815260200191508051906020019080838360005b838110156100cd5780820151818401526020810190506100b2565b50505050905090810190601f1680156100fa5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b34801561011557600080fd5b5061013e6004803603810190808035906020019092919080359060200190929190505050610319565b005b34801561014c57600080fd5b506101b1600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190505050610557565b005b60606000806002600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154818054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103085780601f106102dd57610100808354040283529160200191610308565b820191906000526020600020905b8154815290600101906020018083116102eb57829003601f168201915b505050505091509250925050915091565b600082600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154101515156103d5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f596f7520646f206e6f74206861766520656e6f7567682062616c616e6365000081525060200191505060405180910390fd5b6002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905082600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000828254039250508190555082600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600082825401925050819055507ff4b6b12773a7000ee84e1736044fa4864d44afcd8ffdc5ed7ffa63c2e165819133828542604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182815260200194505050505060405180910390a1505050565b60006001600060408051908101604052808681526020016127108152509080600181540180825580915050906001820390600052602060002090600202016000909192909190915060008201518160000190805190602001906105bb9291906106b3565b50602082015181600101555050039050336002600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008181548110151561062c57fe5b9060005260206000209060020201600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082018160000190805460018160011615610100020316600290046106a0929190610733565b5060018201548160010155905050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106106f457805160ff1916838001178555610722565b82800160010185558215610722579182015b82811115610721578251825591602001919060010190610706565b5b50905061072f91906107ba565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061076c57805485556107a9565b828001600101855582156107a957600052602060002091601f016020900482015b828111156107a857825482559160010191906001019061078d565b5b5090506107b691906107ba565b5090565b6107dc91905b808211156107d85760008160009055506001016107c0565b5090565b905600a165627a7a72305820a08b43a759cd82620874b1dd2d8e2944794bc80812f7e4cc6d7bc90929dbc6e60029';
//get the transaction count from account 1 as it is the sender
web3.eth.getTransactionCount(government, (err , txCount) => {
    //Transaction Object
    const txObject = {
        nonce : web3.utils.toHex(txCount),          //all paramters should be in Hex
        gasLimit : web3.utils.toHex(5000000),
        gasPrice : web3.utils.toHex(web3.utils.toWei('0','gwei')),
        data : data
    }

//Sign a transaction
    const tx = new Tx(txObject)
    tx.sign(privateKeyGovernment)

    const serializedTransaction = tx.serialize()
    const raw = '0x' + serializedTransaction.toString('hex')

//Broadcast a transaction
    web3.eth.sendSignedTransaction(raw , (err , txHash) => {
        console.log('txHash : ' , txHash)
    })
})