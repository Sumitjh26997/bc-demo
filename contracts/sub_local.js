const Tx = require('ethereumjs-tx')
const Web3 = require('web3');
const web3 = new Web3('http://127.0.0.1:7545')

const government = '0x5578Ec2cb3994BC87823802071241726EBC40FDF'

const privateKeyGovernment = Buffer.from('55f8f475ba59b726f4b1edf4a90ac326f752016c41c35a95004bd1480ca08210', 'hex')

//console.log(privateKeyGovernment)
const data = '0x608060405234801561001057600080fd5b506108c0806100206000396000f300608060405260043610610062576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063b93a89f714610067578063b93f9b0a14610114578063d56768eb14610181578063ea87152b146101b8575b600080fd5b34801561007357600080fd5b506100926004803603810190808035906020019092919050505061022b565b6040518080602001838152602001828103825284818151815260200191508051906020019080838360005b838110156100d85780820151818401526020810190506100bd565b50505050905090810190601f1680156101055780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b34801561012057600080fd5b5061013f60048036038101908080359060200190929190505050610391565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561018d57600080fd5b506101b660048036038101908080359060200190929190803590602001909291905050506103ce565b005b3480156101c457600080fd5b50610229600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192908035906020019092919050505061060c565b005b60606000806002600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154818054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103805780601f1061035557610100808354040283529160200191610380565b820191906000526020600020905b81548152906001019060200180831161036357829003601f168201915b505050505091509250925050915091565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600082600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101541015151561048a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f596f7520646f206e6f74206861766520656e6f7567682062616c616e6365000081525060200191505060405180910390fd5b6002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905082600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000828254039250508190555082600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600082825401925050819055507ff4b6b12773a7000ee84e1736044fa4864d44afcd8ffdc5ed7ffa63c2e165819133828542604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182815260200194505050505060405180910390a1505050565b6000600160006040805190810160405280868152602001612710815250908060018154018082558091505090600182039060005260206000209060020201600090919290919091506000820151816000019080519060200190610670929190610768565b50602082015181600101555050039050336002600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000818154811015156106e157fe5b9060005260206000209060020201600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082018160000190805460018160011615610100020316600290046107559291906107e8565b5060018201548160010155905050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106107a957805160ff19168380011785556107d7565b828001600101855582156107d7579182015b828111156107d65782518255916020019190600101906107bb565b5b5090506107e4919061086f565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610821578054855561085e565b8280016001018555821561085e57600052602060002091601f016020900482015b8281111561085d578254825591600101919060010190610842565b5b50905061086b919061086f565b5090565b61089191905b8082111561088d576000816000905550600101610875565b5090565b905600a165627a7a72305820d95a0ff93f1b67b72a2558fc2421bcf1a1517d5fc3b89108a7af774675ab32530029';
//get the transaction count from account 1 as it is the sender
web3.eth.getTransactionCount(government, (err , txCount) => {
    //Transaction Object
    const txObject = {
        nonce : web3.utils.toHex(txCount),          //all paramters should be in Hex
        gasLimit : web3.utils.toHex(5000000),
        gasPrice : web3.utils.toHex(web3.utils.toWei('0','gwei')),
        data : data
    }

//Sign a transaction
    const tx = new Tx(txObject)
    tx.sign(privateKeyGovernment)

    const serializedTransaction = tx.serialize()
    const raw = '0x' + serializedTransaction.toString('hex')

//Broadcast a transaction
    web3.eth.sendSignedTransaction(raw , (err , txHash) => {
        console.log('txHash : ' , txHash)
    })
})